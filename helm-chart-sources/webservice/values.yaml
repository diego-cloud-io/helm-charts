# Default values for webservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

containerPort: 80


livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
readinessProbe: {}
  # httpGet:
  #   path: /
  #   port: http

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  # annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

defaultIngress:
  enabled: false
  # host: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# priorityClassName: 

hooks: 
# # we can place simple hooks here in a phase and wave
# # that will execute with the image and environment 
  # preSync:
  #   - name: migrate
  #     wave: '5'
  #     command: ["python", "manage.py", "migrate"]
  preSync: []
  sync: []
  postSync: []
 
env:
  # default sets for pre-canned values and non-literals.
  defaultSets:
    jaegerDaemonsetAgent:
      enabled: true
      port: 6831
    otelCollectorAgent:
      enabled: true
      
  config: {}
  # # we can place defaults here in following form:
  # config:
  #   ENV_VAR_NAME: value

  secrets: {}
  # # we can place default secrets here in following form:
  # secrets:
  #   ENV_VAR_NAME: $ { secrets.getValue("my-secret") }

  # TODO verify and document immutability constraints, and deployment ordering.
  # we can apply these external secrets in advance. The challenge is the use
  # of external secrets controller which may take several minutes to create
  # underlying secret. This, in turn, gives us a gap which will be noticable on
  # UPDATE - i.e. the pods will start before the secret is updated.
  externalSecrets: {}
  # # externalSecrets are a little more complicated, but
  # # follow a similar pattern. We provide the complete ExternalSecret
  # # spec against a key to the secret/external-secret name. The data
  # # name values are the resulting environment variable name.
    # my-secrets: # name of the secret
    #   envMapping:
    #     DATABASE_PASSWORD: my_secret2_thing
    #   spec:
    #     backendType: "secretsManager" # ExternalSecret spec
    #     roleArn: "arn:aws:iam::848956251477:role/kubesecrets"
    #     data:
    #       - key: "arn:aws:secretsmanager:eu-west-1:000000000000:secret:my_secret1"
    #         name: "my_secret1" # Resulting env var
    #       - key: "arn:aws:secretsmanager:eu-west-1:000000000000:secret:my_secret2"
    #         name: "my_secret2_thing"
    #       - key: "arn:aws:secretsmanager:eu-west-1:000000000000:secret:my_secret3"
    #         name: "ANOTHER_ENV_VAR_FOR_APP2"
      #this is the external secret spec, however, only the 'data' ones are automatically mapped.
# TODO : look at mapping the envVars directly from data k-v pairs into statefulset env.