# Default values for webservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  # repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
# fullnameOverride: ""

containerPort: 80


livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http
readinessProbe: {}
  # httpGet:
  #   path: /
  #   port: http

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  # annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

defaultIngress:
  enabled: false
  # host: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# priorityClassName: 

# A map of conformed ArgoCD hooks. Hooks run in the specified wave in the Sync phase. 
# For reference, the configMap and Secrets genereted by this chart will be created by 
# ArgoCD in the Sync phase with a wave value of -1000
hooks: {}
  # migrate:
  #   wave: -10
  #   command: ["python", "manage.py", "migrate"]

env: {}
  # MY_ENV_VAR:
  #   value: "hello"
  # MY_SECRET_THING:
  #   secretPath: /prod/blah
  #   version: 1